#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import (division, print_function, absolute_import,
                        unicode_literals)

import sys
import argparse
import random
from datetime import date


# TODO
#      Check and double-check the milestone calculations
#      Support males and females who are older than the life expectancy estimates
#      Add unit tests
#      Return "x years, y months, z weeks and a days" instead of "42.87 years"
#      Add option to print dates for next and/or all future milestone(s)
#        eg 15,000 days old on ...


def printAgeInfo(agedays, expect, lifetime):
    '''
    Print age and longevity information
    '''

    print('')
    print("You are", '{:0,.2f}'.format(agedays / 365.25), "years old")   #      10 years
    print("You are", '{:0,.2f}'.format(agedays / 30.41),  "months old")  #      50 months
    print("You are", '{:0,.2f}'.format(agedays / 7.0),    "weeks old")   #     100 weeks
    print("You are", '{:0,d}'.format(agedays),            "days old")    #     500 days
    #print("You are", '{:0,d}'.format(age.days*24),       "hours old")   #   10000 hours
    #print("You are", '{:0,d}'.format(age.days*24*60),    "minutes old") #  100000 minutes
    #print("You are", '{:0,d}'.format(age.days*24*60*60), "seconds old") # 1000000 seconds
    print('')
    print("You can expect to live approximately", '{:0,.2f}'.format(expect / 365.25), "years")
    print("You can expect to live approximately", '{:0,.2f}'.format(expect / 30.41),  "months")
    print("You can expect to live approximately", '{:0,.2f}'.format(expect / 7.0),    "weeks")
    print("You can expect to live approximately", '{:0,.0f}'.format(expect),          "days")
    print('')
    print("You are approximately %.1f %% dead"  % (agedays * 100.0 / lifetime))
    print("You are approximately %.1f %% alive" % (expect * 100.0 / lifetime))
    print('')


# NOTE These are UK-specific lifetime estimates
# https://www.ons.gov.uk/peoplepopulationandcommunity/birthsdeathsandmarriages/lifeexpectancies/bulletins/nationallifetablesunitedkingdom/20132015
# What are error bars on these estimates?
# When and how often do these estimates need to be updated?
def get_lifetime(sex):
    '''
    Get lifetime based on gender (from https://www.ons.gov.uk/)
    '''

    lifetime = 0

    if sex.upper() == 'M':
        lifetime = 79.1 * 365.25
    elif sex.upper() == 'F':
        lifetime = 82.8 * 365.25

    return lifetime


def main(args):
    day     = args.date
    month   = args.month
    year    = args.year
    sex     = args.sex
    verbose = args.verbose

    try:
        birthday = date(year, month, day)

        now = date.today()
        age = now - birthday

        lifetime = get_lifetime(sex)
        expect = lifetime - age.days

        if ( verbose or                                     # print results if verbose is true or
             age.days % 500  == 0 or expect % 500  == 0 or  # 500 days
             age.days % 700  == 0 or expect % 700  == 0 or  # 100 weeks
             age.days % 1521 == 0 or expect % 1521 == 0 or  #  50 months
             (age.days * 10 % 3652) / 10 == 0 or (expect * 10 % 3652) / 10 == 0 or  #  10 years
             #age.days % 3652.5 == 0 or expect % 3652.5 == 0 or                     #  10 years - don't use decimals with modulo
             (age.days * 100 / lifetime) % 10 == 0 or          # 10, 20, ... % of lifetime
             random.randint(1, 366) == 365                 ):  # print results approx once per year
            printAgeInfo(age.days, expect, lifetime)

    except ValueError:
        err = sys.exc_info()[1]
        print(err.args[0])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
            description="Memento mori - Remmeber death https://github.com/makeyourownmaker/ParametricWeatherModel")
    optional = parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    required.add_argument('-s', '--sex',
            help='Sex (m or M for male and f or F for female)',
            required=True, type=str, choices=['m', 'M', 'f', 'F'])
    required.add_argument('-y', '--year',
            help='Year of birth (1900 onwards)',
            required=True, type=int)
    required.add_argument('-m', '--month',
            help='Month of birth (1 to 12)',
            required=True, type=int, metavar='[1, 12]', choices=range(1, 13))
    required.add_argument('-d', '--date',
            help='Day of birth (1 to 31)',
            required=True, type=int, metavar='[1, 31]', choices=range(1, 32))

    optional.add_argument('-v',  '--verbose',
            help='Print additional information',
            default=True, action="store_false")

    parser._action_groups.append(optional)
    args = parser.parse_args()

    main(args)
