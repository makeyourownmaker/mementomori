#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import (division, print_function, absolute_import,
                        unicode_literals)

import sys
import argparse
import random
from datetime import datetime, date


def valid_date(s):
    try:
        return datetime.strptime(s, "%Y-%m-%d")
    except ValueError:
        msg = "Not a valid date: '{0}'.".format(s)
        raise argparse.ArgumentTypeError(msg)


def int_range(min=None, max=None):
    def check_range(x):
        x = int(x)

        if x < min and min is not None:
            raise argparse.ArgumentTypeError("%r not in range [%r, %r]" % (x, min, max))

        if x > max and max is not None:
            raise argparse.ArgumentTypeError("%r not in range [%r, %r]" % (x, min, max))

        return x

    return check_range


def printAgeInfo(agedays, expect, lifetime):
    '''
    Print age and longevity information
    '''

    print('')
    print("You are", '{:0,.2f}'.format(agedays / 365.25), "years old")   #  10 years
    print("You are", '{:0,.2f}'.format(agedays / 30.41),  "months old")  #  50 months
    print("You are", '{:0,.2f}'.format(agedays / 7.0),    "weeks old")   # 100 weeks
    print("You are", '{:0,d}'.format(agedays),            "days old")    # 500 days
    print('')
    print("You can expect to live approximately", '{:0,.2f}'.format(expect / 365.25), "years")
    print("You can expect to live approximately", '{:0,.2f}'.format(expect / 30.41),  "months")
    print("You can expect to live approximately", '{:0,.2f}'.format(expect / 7.0),    "weeks")
    print("You can expect to live approximately", '{:0,.0f}'.format(expect),          "days")
    print('')
    print("You are approximately %.1f %% dead"  % (agedays * 100.0 / lifetime))
    print("You are approximately %.1f %% alive" % (expect * 100.0 / lifetime))
    print('')


# NOTE These are UK-specific lifetime estimates from the Office for National Statistics
# https://www.ons.gov.uk/peoplepopulationandcommunity/birthsdeathsandmarriages/lifeexpectancies/bulletins/nationallifetablesunitedkingdom/2016to2018
# What are error bars on these estimates?
# These estimates are updated every 3 years
def get_lifetime(args):
    '''
    Get lifetime based on gender (from https://www.ons.gov.uk/)
    '''

    lifetime = 0

    if args.lifetime == 0:
        sex = args.sex
        if sex.upper() == 'M':
            lifetime = 79.3 * 365.25
        elif sex.upper() == 'F':
            lifetime = 82.9 * 365.25
    else:
        lifetime = args.lifetime * 365.25

    return lifetime


def main(args):
    day     = args.birthdate.day
    month   = args.birthdate.month
    year    = args.birthdate.year
    verbose = args.verbose

    try:
        birthday = date(year, month, day)

        now = date.today()
        age = now - birthday

        lifetime = get_lifetime(args)
        expect   = lifetime - age.days

        if ( verbose or                                     # print results if verbose is true or
             age.days % 500  == 0 or expect % 500  == 0 or  # 500 days
             age.days % 700  == 0 or expect % 700  == 0 or  # 100 weeks
             age.days % 1521 == 0 or expect % 1521 == 0 or  #  50 months
             (age.days * 10 % 3652) / 10 == 0 or (expect * 10 % 3652) / 10 == 0 or  # 10 years
             (age.days * 100 / lifetime) % 10 == 0 or          # 10, 20, ... % of lifetime
             random.randint(1, 366) == 365                 ):  # print results approx once per year
            printAgeInfo(age.days, expect, lifetime)

    except ValueError:
        err = sys.exc_info()[1]
        print(err.args[0])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
            description="Memento mori - Remmeber death https://github.com/makeyourownmaker/ParametricWeatherModel")
    required = parser.add_argument_group('required arguments')
    required.add_argument('-b', '--birthdate',
            help='Date of birth - format YYYY-MM-DD',
            required=True, type=valid_date)

    mutex = parser.add_mutually_exclusive_group()
    mutex.add_argument('-s', '--sex',
            help='Sex (m or M for male and f or F for female)',
            nargs='?', type=str, choices=['m', 'M', 'f', 'F'])
    mutex.add_argument('-l', '--lifetime',
            help='Expected lifetime in years - default=%(default)s',
            nargs='?', default=0, type=float, metavar='[1, 100]', choices=range(1, 101))

    optional = parser._action_groups.pop()
    optional.add_argument('-v',  '--verbose',
            help='Print additional information - default=%(default)s',
            default=True, action="store_false")

    parser._action_groups.append(optional)
    args = parser.parse_args()

    if args.birthdate.date() > date.today():
        print("ERROR: 'birthdate' cannot be in the future")
        print("ERROR: 'birthdate' %s" % args.birthdate.date())
        print("ERROR: 'today' " + str(date.today()))
        exit()

    if args.birthdate.year < 1900:
        print("ERROR: 'birthdate' cannot before 1900")
        print("ERROR: 'birthdate' %s" % args.birthdate.date())
        exit()

    main(args)
